{"version":3,"sources":["BooksAPI.js","BookChanger.js","SearchBooks.js","BookShelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","BookChanger","_this$props","this","props","changeShelf","react_default","a","createElement","value","onChange","event","target","disabled","React","Component","SearchBooks","state","displayForSearch","searchQuery","BooksAPI","error","_this","setState","map","foundBook","forEach","_this2","className","Link","to","onClick","showSearchPage","type","placeholder","key","style","width","height","backgroundImage","undefined","imageLinks","thumbnail","src_BookChanger","title","author","BookShelf","BooksApp","result","filter","filtered","_this3","Route","exact","path","render","src_BookShelf","src_SearchBooks","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.adea82dc.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\n\r\n\r\n\r\nclass BookChanger extends React.Component {\r\n\r\n    render(){\r\n        \r\n            const { changeShelf, book } = this.props;\r\n\r\n        return (\r\n            \r\n            <select value={book.shelf} onChange={(event) => changeShelf(event.target.value, book)}>\r\n            \r\n                <option value=\"move\" disabled>Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default BookChanger","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n//import escapeRegExp from 'escape-string-regexp'\r\n//import sortBy from 'sort-by'\r\nimport BookChanger from './BookChanger'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\n\r\n\r\nclass SearchBooks extends React.Component {\r\n\r\n    state = {\r\n        displayForSearch: []\r\n    }\r\n\r\n\r\n    searchQuery = (query) => {\r\n        if (query !== '') {\r\n            \r\n\r\n            /*\r\n            Get a list of books from the search method of the API\r\n            If there is no result, clear the displayed book array\r\n            otherwise, loop over the list of returned book and compare it with the already shelved books\r\n            Set the shelf of the displayed book and update the result list\r\n            */\r\n            BooksAPI.search(query).then(books => {\r\n                if (!books || books.error) this.setState({displayForSearch: []})\r\n                else {\r\n                    books.map(foundBook => {\r\n                        this.props.books.forEach(book => {\r\n                            if(foundBook.id === book.id){\r\n                                foundBook.shelf = book.shelf\r\n                            } else {\r\n                                foundBook.shelf = 'none';\r\n                            }\r\n                        })\r\n                        return foundBook;\r\n                    })\r\n                    \r\n                    this.setState({ displayForSearch: books })\r\n                }\r\n                \r\n            })\r\n        } else { // if empty query, clear the displayed books\r\n            this.setState({ displayForSearch: [] })\r\n        }\r\n    }\r\n    \r\n\r\n    render(){\r\n\r\n        const { displayForSearch } = this.state;\r\n        return (\r\n            <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to='./' className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by title or author\"\r\n                    value={this.props.query}\r\n                    onChange={(event) => this.searchQuery(event.target.value)}\r\n                    />\r\n                    \r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n              \r\n              {displayForSearch && displayForSearch.map((book) => (\r\n                  \r\n                        <li key={book.id}>\r\n                            <div className=\"book\">\r\n                                <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: book.imageLinks === undefined ? `url(https://s7.postimg.cc/shls4dbcb/persons.png)` : `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                    <BookChanger book={book} changeShelf={this.props.changeShelf} />\r\n                                </div>\r\n                                </div>\r\n                                <div className=\"book-title\">{book.title}</div>\r\n                                <div className=\"book-authors\">{book.author}</div>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBooks","import React from 'react'\r\nimport BookChanger from './BookChanger'\r\n\r\n\r\n\r\n\r\nclass BookShelf extends React.Component {\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"bookshelf\">\r\n                <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                {/*If the book shelf matchs the shelf title then render it */}\r\n                    {this.props.books.map((book) => book.shelf === this.props.title  && (\r\n                        \r\n                        <li key={book.id}>\r\n                            <div className=\"book\">\r\n                                <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                    <BookChanger changeShelf={this.props.changeShelf} book={book}/>\r\n                                </div>\r\n                                </div>\r\n                                <div className=\"book-title\">{book.title}</div>\r\n                                <div className=\"book-authors\">{book.author}</div>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default BookShelf","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport SearchBooks from './SearchBooks'\r\n//import ListBooks from './ListBooks'\r\nimport { Route } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport BookShelf from './BookShelf'\r\n\r\n\r\n\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    books: []\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({ books })\r\n      \r\n    })\r\n\r\n  }\r\n\r\n  changeShelf = (shelf, book) => {\r\n    \r\n    let result = [];\r\n\r\n    BooksAPI.update(book, shelf).then(() => {\r\n\r\n      book.shelf = shelf;\r\n\r\n      result = this.state.books.filter((filtered) => filtered.id !== book.id)\r\n      this.setState({ books: result.concat(book) })\r\n\r\n    })\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path='/' render={() => (\r\n            <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n                <div>\r\n                  \r\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                <BookShelf title=\"currentlyReading\" books={this.state.books} changeShelf={this.changeShelf}/>\r\n\r\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                <BookShelf title=\"wantToRead\" books={this.state.books} changeShelf={this.changeShelf}/>\r\n\r\n                <h2 className=\"bookshelf-title\">Read</h2>\r\n                <BookShelf title=\"read\" books={this.state.books} changeShelf={this.changeShelf}/>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n            <Link to='/search' >Add a book</Link>\r\n            </div>\r\n        </div>\r\n          \r\n        )}/>\r\n          \r\n        <Route path='/search' render={() => ( // What was it for? I was moving the search function here , but i moved it again in the search book again\r\n          <SearchBooks books={this.state.books} searchQuery={this.searchQuery} changeShelf={this.changeShelf}/>\r\n        )}/>\r\n          \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n     document.getElementById('root'))\r\n"],"sourceRoot":""}